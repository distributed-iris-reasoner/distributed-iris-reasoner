/*
 * Copyright 2010 Softgress - http://www.softgress.com/
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package eu.larkc.iris.evaluation.bottomup.naive;

import java.util.List;

import org.deri.iris.EvaluationException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import eu.larkc.iris.evaluation.EvaluationContext;
import eu.larkc.iris.evaluation.bottomup.IDistributedRuleEvaluator;
import eu.larkc.iris.rules.compiler.IDistributedCompiledRule;

/**
 * Defines the evaluator used for the rules on one stratum.
 * If some data is generated by the evaluation of any of the rules then all the rules are evaluated again until no more data is produced.
 * 
 * TODO optimize for one rule stratum, do not evaluate again if the rule is non-self depending
 * 
 * @author valer.roman@softgress.com
 * 
 */
public class DistributedNaiveEvaluator implements IDistributedRuleEvaluator {

	private static final Logger logger = LoggerFactory.getLogger(DistributedNaiveEvaluator.class);
	
	@Override
	public void evaluateRules( Integer stratumNumber, List<IDistributedCompiledRule> rules, eu.larkc.iris.Configuration configuration)
			throws EvaluationException {
		int iterationNumber = 1;
		boolean cont = true;
		while( cont )
		{
			cont = false;
			
			int ruleNumber = 1;
			// For each rule in the collection (stratum)
			for (final IDistributedCompiledRule rule : rules )
			{
				logger.info("evaluate stratum : " + stratumNumber + ", iteration : " + iterationNumber + ", ruleNumber : " + ruleNumber + ", rule : " + rule.getRule());
				boolean delta = rule.evaluate(new EvaluationContext(stratumNumber, iterationNumber, ruleNumber));
				cont = delta ?  delta : cont;
				ruleNumber++;
			}
			iterationNumber++;
		}

	}

}
