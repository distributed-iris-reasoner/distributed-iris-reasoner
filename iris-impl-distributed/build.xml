<?xml version="1.0"?>

<!--
  ~ Copyright (c) 2009 Concurrent, Inc.
  ~
  ~ This work has been released into the public domain
  ~ by the copyright holder. This applies worldwide.
  ~
  ~ In case this is not legally possible:
  ~ The copyright holder grants any entity the right
  ~ to use this work for any purpose, without any
  ~ conditions, unless such conditions are required by law.
  -->

<!--
  ~ This work is licensed under a Creative Commons Attribution-Share Alike 3.0 United States License.
  ~ http://creativecommons.org/licenses/by-sa/3.0/us/
  -->

<project name="iris-impl-distributed" default="jar" basedir=".">

  <!-- load properties first -->
  <!--<property file="${user.home}/.${ant.project.name}.build.properties" />-->
  <property file="${basedir}/build.properties"/>

  <!-- property name="iris.distributed.version" value="x.y.z"/ -->

  <!-- these are optional, only used if you uncomment the project.class.path filesets below -->
  <property name="hadoop.home" location="${softsdir}/hadoop-0.21.0"/>
  <property name="hadoop.lib" location="${hadoop.home}/lib"/>

  <!-- assumes Cascading shares the same parent directory, change if necessary -->
  <property name="cascading.home" location="${softsdir}/cascading-1.2.0-hadoop-0.19.2+"/>
  <property file="${cascading.home}/version.properties"/>
  <property name="cascading.release.version" value="1.2.0"/>
  <property name="cascading.filename.core" value="cascading-core-${cascading.release.version}.jar"/>
  <property name="cascading.filename.xml" value="cascading-xml-${cascading.release.version}.jar"/>
  <property name="cascading.filename.test" value="cascading-test-${cascading.release.version}.jar"/>
  <property name="cascading.libs" value="${cascading.home}/lib"/>
  <property name="cascading.libs.core" value="${cascading.libs}"/>
  <property name="cascading.libs.xml" value="${cascading.libs}/xml"/>

  <property name="maven.repo" location="/home/valer/.m2/repository"/>
  <property name="iris.api.lib" value="${maven.repo}/at/sti2/iris/iris-api/0.7.2/iris-api-0.7.2.jar"/>
  <property name="iris.parser.lib" value="${maven.repo}/at/sti2/iris/iris-parser/0.7.2/iris-parser-0.7.2.jar"/>
  <property name="iris.impl.lib" value="${maven.repo}/at/sti2/iris/iris-impl/0.7.2/iris-impl-0.7.2.jar"/>
  <property name="rif4j.impl.lib" value="${maven.repo}/at/sti2/rif4j/rif4j-impl/1.0.0-SNAPSHOT/rif4j-impl-1.0.0-SNAPSHOT.jar"/>
  <property name="rif4j.iris.lib" value="${maven.repo}/at/sti2/rif4j/rif4j-iris/1.0.0-SNAPSHOT/rif4j-iris-1.0.0-SNAPSHOT.jar"/>
  <property name="rif4j.parser.lib" value="${maven.repo}/at/sti2/rif4j/rif4j-parser/1.0.0-SNAPSHOT/rif4j-parser-1.0.0-SNAPSHOT.jar"/>
	
  <condition property="cascading.path" value="${cascading.home}"
             else="${cascading.home}/build">
    <available file="${cascading.home}/${cascading.filename.core}"/>
  </condition>

  <property name="cascading.lib.core" value="${cascading.path}/${cascading.filename.core}"/>
  <property name="cascading.lib.xml" value="${cascading.path}/${cascading.filename.xml}"/>
  <property name="cascading.lib.test" value="${cascading.path}/${cascading.filename.test}"/>

  <property name="src.dir" location="${basedir}/src/main/java"/>
  <!-- property name="src.test" location="${basedir}/src/test/java"/ -->
  <property name="resources.dir" location="${basedir}/src/main/resources"/>
	
  <available file="${src.dir}" type="dir" property="main.available"/>
  <!-- available file="${src.test}" type="dir" property="test.available"/ -->

  <property name="conf.dir" location="${hadoop.home}/conf"/>

  <property name="lib.dir" location="${basedir}/lib"/>

  <property name="build.dir" location="${basedir}/build/"/>
  <property name="build.classes" location="${build.dir}/classes"/>
  <property name="build.test" location="${build.dir}/test"/>

  <property name="test.results" location="${build.dir}/results"/>

  <property name="javac.debug" value="true"/>

  <property name="dist" location="dist"/>

  <path id="project.class.path">
    <pathelement location="${build.classes}"/>
    <pathelement location="${build.test}"/>
    <pathelement location="${cascading.lib.core}"/>
    <pathelement location="${cascading.lib.xml}"/>
    <pathelement location="${cascading.lib.test}"/>

    <fileset dir="${cascading.libs}">
      <include name="**/*.jar"/>
    </fileset>

  	<pathelement location="${iris.api.lib}"/>
  	<pathelement location="${iris.parser.lib}"/>
  	<pathelement location="${iris.impl.lib}"/>

  	<pathelement location="${rif4j.impl.lib}"/>
  	<pathelement location="${rif4j.iris.lib}"/>
  	<pathelement location="${rif4j.parser.lib}"/>

  	<pathelement location="${maven.repo}/org/semweb4j/rdf2go.api/4.7.3/rdf2go.api-4.7.3.jar"/>
  	<pathelement location="${maven.repo}/org/semweb4j/rdf2go.impl.sesame23/4.7.3/rdf2go.impl.sesame23-4.7.3.jar"/>
  	<pathelement location="${maven.repo}/org/openrdf/openrdf-sesame/2.3.2/openrdf-sesame-2.3.2.jar"/>

    <!--<fileset dir="${lib.dir}">-->
    <!--<include name="*.jar"/>-->
    <!--</fileset>-->

    <fileset dir="${hadoop.home}">
      <include name="*.jar"/>
    </fileset>

    <fileset dir="${hadoop.home}/build" erroronmissingdir="false">
      <include name="*.jar"/>
    </fileset>

    <fileset dir="${hadoop.lib}">
      <include name="**/*.jar"/>
    </fileset>

  </path>

  <target name="clean">

    <echo message="cleaning..."/>
    <delete dir="${build.dir}"/>
    <delete dir="${dist}"/>
    <delete dir="${ant.project.name}.tgz"/>

  </target>

  <target name="build">

    <echo message="building..."/>
    <echo message="using cascading lib: ${cascading.lib.core}"/>
    <mkdir dir="${build.classes}"/>
    <mkdir dir="${build.test}"/>
    <mkdir dir="${lib.dir}"/>

    <javac srcdir="${src.dir}" destdir="${build.classes}" verbose="off" debug="${javac.debug}">
      <classpath refid="project.class.path"/>
    </javac>

    <copy todir="${build.classes}">
      <fileset dir="${src.dir}">
        <exclude name="**/*.java"/>
      </fileset>
    </copy>

    <!-- javac srcdir="${src.test}" destdir="${build.test}" verbose="off" debug="${javac.debug}">
      <classpath refid="project.class.path"/>
    </javac -->

    <!-- copy todir="${build.test}">
      <fileset dir="${src.test}">
        <exclude name="**/*.java"/>
      </fileset>
    </copy -->

    <copy todir="${build.classes}">
      <fileset dir="${resources.dir}" />
    </copy>

  </target>

  <target name="jar" depends="build" description="creates module jar">

    <jar jarfile="${build.dir}/${ant.project.name}-${iris.distributed.version}.jar">
      <fileset dir="${build.classes}"/>
        <zipfileset file="${cascading.lib.core}" prefix="lib" />
    	<zipfileset file="${cascading.lib.xml}" prefix="lib" />
    	<!-- zipfileset file="${cascading.lib.test}" prefix="lib" / -->

		<zipfileset file="${maven.repo}/at/sti2/iris/iris-api/0.7.2/iris-api-0.7.2.jar" prefix="lib" />
		<zipfileset file="${maven.repo}/at/sti2/iris/iris-parser/0.7.2/iris-parser-0.7.2.jar" prefix="lib" />
		<zipfileset file="${maven.repo}/at/sti2/iris/iris-impl/0.7.2/iris-impl-0.7.2.jar" prefix="lib" />

		<zipfileset file="${maven.repo}/at/sti2/rif4j/rif4j-impl/1.0.0-SNAPSHOT/rif4j-impl-1.0.0-SNAPSHOT.jar" prefix="lib" />
    	<zipfileset file="${maven.repo}/at/sti2/rif4j/rif4j-iris/1.0.0-SNAPSHOT/rif4j-iris-1.0.0-SNAPSHOT.jar" prefix="lib" />
		<zipfileset file="${maven.repo}/at/sti2/rif4j/rif4j-parser/1.0.0-SNAPSHOT/rif4j-parser-1.0.0-SNAPSHOT.jar" prefix="lib" />

    	<zipfileset file="${maven.repo}/commons-lang/commons-lang/2.5/commons-lang-2.5.jar" prefix="lib" />
    	<zipfileset file="${maven.repo}/org/jgrapht/jgrapht-jdk1.5/0.7.3/jgrapht-jdk1.5-0.7.3.jar" prefix="lib" />
      	<zipfileset file="${maven.repo}/org/semweb4j/rdf2go.api/4.7.3/rdf2go.api-4.7.3.jar" prefix="lib" />
      	<zipfileset file="${maven.repo}/org/semweb4j/rdf2go.impl.sesame23/4.7.3/rdf2go.impl.sesame23-4.7.3.jar" prefix="lib" />
      	<zipfileset file="${maven.repo}/org/openrdf/openrdf-sesame/2.3.2/openrdf-sesame-2.3.2.jar" prefix="lib" />

    </jar>

  </target>


  <target name="test" depends="build">
    <echo message="running all tests..."/>

    <mkdir dir="${test.results}"/>
    <mkdir dir="build/test/log"/>

    <junit printsummary="true" showoutput="${test.showoutput}" fork="yes" haltonerror="no" haltonfailure="no" dir="."
           maxmemory="756m">

      <sysproperty key="test.cluster.enabled" value="${test.cluster.enabled}"/>
      <sysproperty key="test.build.data" value="data"/>
      <sysproperty key="hadoop.log.dir" value="build/test/log"/>

      <!--<jvmarg value="-Xdebug"/>--><!--<jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005"/>-->

      <classpath>
        <path refid="project.class.path"/>
        <pathelement path="${java.class.path}"/>
      </classpath>
      <formatter type="plain" usefile="true"/>

      <!-- test name="${testcase}" todir="${test.results}" if="testcase" haltonfailure="${test.haltonerror}"/ -->
      <!-- batchtest todir="${test.results}" haltonfailure="${test.haltonerror}" unless="testcase">
        <fileset dir="${src.test}">
          <include name="**/*Test.java"/>
        </fileset>
      </batchtest -->
    </junit>

  </target>

  <target name="dist" depends="clean" description="packages current project">

    <mkdir dir="${dist}"/>

    <copy todir="${dist}">

      <fileset dir=".">
        <include name="src/**"/>
        <include name="build.xml"/>
        <include name="README.txt"/>
      </fileset>

    </copy>

  </target>

  <target name="tar" depends="dist" description="creates an archive of current project">
    <tar destfile="${ant.project.name}.tgz"
         compression="gzip">
      <tarfileset dir="dist/" prefix="${ant.project.name}">
        <include name="**/**"/>
      </tarfileset>
    </tar>
  </target>

</project>